# Welfare Association Application - Setup Requirements

## System Requirements
- PHP 8.2 or higher
- Composer 2.x
- Node.js 18.x or higher  
- npm or yarn
- MySQL 8.0 or PostgreSQL 13+
- Git

## Installation Steps

### 1. Install PHP and Extensions
```bash
# Ubuntu/Debian
sudo apt update
sudo apt install php8.2 php8.2-cli php8.2-common php8.2-mysql php8.2-xml php8.2-mbstring php8.2-curl php8.2-zip php8.2-gd php8.2-intl php8.2-bcmath

# macOS (with Homebrew)
brew install php@8.2

# Enable required extensions in php.ini
```

### 2. Install Composer
```bash
# Download and install Composer globally
curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
```

### 3. Install Node.js and npm
```bash
# Ubuntu/Debian
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs

# macOS (with Homebrew)
brew install node@18

# Verify installation
node --version
npm --version
```

### 4. Database Setup
```bash
# Install MySQL
sudo apt install mysql-server

# Or PostgreSQL
sudo apt install postgresql postgresql-contrib

# Create database
mysql -u root -p
CREATE DATABASE welfare_association;
CREATE USER 'welfare_user'@'localhost' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON welfare_association.* TO 'welfare_user'@'localhost';
FLUSH PRIVILEGES;
```

### 5. Project Setup
```bash
# Clone/navigate to project directory
cd /path/to/project

# Install PHP dependencies
composer install

# Install Node.js dependencies  
npm install

# Copy environment file
cp .env.example .env

# Generate application key
php artisan key:generate

# Configure database in .env file
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=welfare_association
DB_USERNAME=welfare_user
DB_PASSWORD=your_password

# Run database migrations
php artisan migrate

# Create storage symlink
php artisan storage:link

# Build frontend assets
npm run build
```

### 6. File Permissions
```bash
# Set proper permissions
sudo chown -R www-data:www-data storage bootstrap/cache
sudo chmod -R 775 storage bootstrap/cache
```

## Development Environment

### Required PHP Extensions
- BCMath
- Ctype
- Fileinfo
- JSON
- Mbstring
- OpenSSL
- PDO
- Tokenizer
- XML
- Curl
- GD
- Intl
- Zip

### Frontend Dependencies (already in package.json)
- React 19.x
- TypeScript 5.x
- Tailwind CSS 4.x
- Inertia.js 2.x
- Shadcn/ui components
- Lucide React icons
- Vite 6.x

### Backend Dependencies (already in composer.json)
- Laravel 12.x
- Filament 3.3.x
- Inertia.js Laravel adapter
- Ziggy for route sharing

## Running the Application

### Development
```bash
# Start all development services (recommended)
composer run dev

# Or run services separately:
# Backend
php artisan serve

# Frontend
npm run dev

# Queue worker (in separate terminal)
php artisan queue:work

# Log monitoring (in separate terminal)  
php artisan pail
```

### Production
```bash
# Build frontend assets
npm run build

# Optimize Laravel
php artisan config:cache
php artisan route:cache
php artisan view:cache

# Set up web server (Apache/Nginx)
# Point document root to /public directory
```

## Configuration

### Environment Variables (.env)
```
APP_NAME="Welfare Association"
APP_ENV=local
APP_KEY=base64:... (generated by php artisan key:generate)
APP_DEBUG=true
APP_TIMEZONE=UTC
APP_URL=http://localhost:8000

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=welfare_association
DB_USERNAME=welfare_user
DB_PASSWORD=your_password

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"
```

### Create Admin User
```bash
# Create first admin user
php artisan tinker

# In tinker console:
$user = new App\Models\User();
$user->name = 'Admin User';
$user->email = 'admin@welfare.com';
$user->password = bcrypt('password');
$user->role = 'admin';
$user->is_active = true;
$user->joined_at = now();
$user->save();
```

## Additional Setup

### Queue Configuration
```bash
# For production, set up supervisor for queue workers
sudo apt install supervisor

# Create supervisor config file
sudo nano /etc/supervisor/conf.d/welfare-worker.conf

# Add queue worker configuration
[program:welfare-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /path/to/project/artisan queue:work --sleep=3 --tries=3
autostart=true
autorestart=true
user=www-data
numprocs=1
redirect_stderr=true
stdout_logfile=/path/to/project/storage/logs/worker.log
```

### Scheduled Tasks
```bash
# Add to crontab for task scheduling
crontab -e

# Add this line:
* * * * * cd /path/to/project && php artisan schedule:run >> /dev/null 2>&1
```

### SSL Certificate (Production)
```bash
# Install Certbot for Let's Encrypt
sudo apt install certbot python3-certbot-apache

# Get SSL certificate
sudo certbot --apache -d yourdomain.com
```

## Testing
```bash
# Run PHP tests
php artisan test

# Run frontend tests (if configured)
npm test

# Run linting
npm run lint

# Format code
npm run format
```

## Troubleshooting

### Common Issues
1. **Composer memory limit**: Increase PHP memory limit in php.ini
2. **Permission errors**: Check file ownership and permissions
3. **Database connection**: Verify credentials and database existence
4. **Node.js version**: Ensure Node.js 18+ is installed
5. **Missing PHP extensions**: Install required extensions listed above

### Logs Location
- Laravel logs: `storage/logs/laravel.log`
- Web server logs: `/var/log/apache2/` or `/var/log/nginx/`
- Queue worker logs: Configured in supervisor

## Features Implemented

### Backend (Laravel)
- ✅ User authentication and authorization
- ✅ Member contribution management
- ✅ Loan application and approval system
- ✅ CIC investment tracking
- ✅ Milestone/goal management
- ✅ Interest distribution system
- ✅ Filament admin panel (fixed missing Pages)
- ✅ API endpoints with Inertia.js

### Frontend (React + TypeScript)
- ✅ Modern dashboard with statistics
- ✅ Contribution management interface
- ✅ Loan application forms
- ✅ Responsive design with Tailwind CSS v4
- ✅ Shadcn/ui component library
- ✅ TypeScript for type safety
- ✅ Inertia.js for SPA experience

### TODO - Additional Features to Implement
- [ ] Email notifications for approvals/rejections
- [ ] PDF report generation
- [ ] Mobile app (React Native)
- [ ] SMS notifications
- [ ] Advanced reporting dashboard
- [ ] Audit trail system
- [ ] Backup and restore functionality
- [ ] Multi-tenant support
- [ ] Integration with mobile money APIs (M-Pesa, etc.)

## Security Considerations
- Enable HTTPS in production
- Configure proper firewall rules
- Regular security updates
- Database backups
- Environment variable security
- Rate limiting on APIs
- Input validation and sanitization

## Performance Optimization
- Enable Redis for caching and sessions
- Configure database query optimization
- Use CDN for static assets
- Enable gzip compression
- Monitor application performance
- Set up database indexing

This application is ready for local development. Follow the installation steps above to get started.